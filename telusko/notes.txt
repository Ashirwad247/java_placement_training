javacode -> compiler(javac)->byte code(.class)->JVM 
needs a main file


int -4 bytes
long 8bytes
short 2 bytes
float - 4 bytes 7 precision
double -8 bytes
char- 2 bytes
1 byte -8 bits
byte -2^7 to 2^7-1=>-128 to 127

byte by = 127;
float d = 5.8f;
boolean b = true;
double d = 5.8;
long l = 58541l; l is important

int num1 = 0x7E;==>126

int a = 257;//257%256
byte k =(byte) a;
System.out.println(k);

____________________________
bit wise operators

a = 5 0101
b = 7 0111

a | b = 7 0111

a & b = 0101 5

a ^ b = 2 0010

~a = (2's compliment of a is -6)

__________________________________

hexadecimal notation 0x
0-9 a(10)-f(15)
0x0f = 15

binary notation 0b oB 
0b1010 =>1010 in decimal

octal notaion 0
012 => 10

scientific notaion xEy
1.5e3 = 1.5*10^3 = 1500

__________________________________

signed right shift >>
Use Case: Commonly used for arithmetic shifts, especially when you want to divide a number by a power of two while preserving the sign.
int x = -8;  // Binary: 11111111111111111111111111111000
int result = x >> 2;  // Shifts right by 2, result: 11111111111111111111111111111110
System.out.println(result);  // Output: -2


unsigned right shift >>>
Use Case: Useful when you need to perform a logical shift, treating the number as unsigned.
int x = -8;  // Binary: 11111111111111111111111111111000
int result = x >>> 2;  // Shifts right by 2, result: 00111111111111111111111111111110
System.out.println(result);  // Output: 1073741822


signed left shift <<

Use Case: Commonly used to multiply a number by a power of two.
int num = 8;  // Binary: 00000000000000000000000000001000
int result = num << 2;  // Result: 00000000000000000000000000100000 (which is 32)
System.out.println(result);  // Output: 32

__________________________________________________________________________________________

// import java.io.*;
import java.lang.String;
class Hello{
    
    public static void main(String args[]){
       int n = 4;
       switch(n){
        case 1:System.out.println("Monday");
        case 2:System.out.println("Monday");
        case 3:System.out.println("Monday");
        case 4:System.out.println("Four");break;
        case 5:System.out.println("Five");
        default:System.out.println("Five");
       }
       String res="";
        res= n%2==0?"Even":"Odd";
       System.out.println(res);
}

}

_______________________________________________________________________________________________

Objects have properties and behaviours

Calculator calc = new Calculator();
calc is of type Calculator new creates object of type Calculator.

________________________________________________________________________________________________

in Jvm you execute the code
inside jre(java run time environment) we have JVM 
inside jdk we have both

________________________________________________________________________________________________

inside JVM 

we jave stack and heap memory
classes have instance variable
Every method has its own stack
new Object resides in heap memory
instance variable also reside with the object along with its method 

different objects have different storage locations for their method calls and instance variables

if we change instance vairable of one varialbe \\

method overloading means same methods but different amount or type of paramaters

__________________________________________________________________________________________
*****************
(int)(Math.random()*100) for converting double to int

  // int nums[] = {3,7, 2, 4};
        // int nums[] = new int[4];//all the values will be 0
        int nums[][] = new int[3][4];
        for(int n[]: nums){
            for(int m:n){
                System.out.print(m+" ");
            }
            System.out.println();
        }

        int nums[][] = new int[3][]// is called jagged array
        nums[0] = new int[3];
        nums[1] = new int[4];//mentioning the column size
        nums[2] = new int[2];

        //give me one value n from nums array
            for(int n: nums){
                System.out.println(n);
            }

nums.length for length of array


class Student{
    int rollno;
    String name;
    int marks;

}

public class Hello{
    public static void main(String a[]){
     Student s1 = new Student();
     s1.rollno=12;
     s1.name="H2ri";
     s1.marks=32;
     Student s2 = new Student();
     s2.rollno=21;
     s2.name="Krishna";
     s2.marks=42;
     Student s3 = new Student();
     s3.rollno=52;
     s3.name="Krisi";
     s3.marks=52;

      Student students[]= new Student[3];//creating array of refreneces for Student objects
      students[0] = s1;
      students[1] = s2;
      students[2] = s3;

      System.out.println(s1);//Student@2c7b84de

       for(int i = 0;i<students.length;i++){
        System.out.println(students[i].name+": "+students[i].marks);
       }

       for(Student stud: students){
        System.out.println(stud.name+" : "+stud.marks);
       }
      
     }

}

__________________________________________________________________________________________
*****************
//Yes, strings are immutable in Java.
String is a class
String name = new String("navin"); pass string to String constructor
name.charAt(0)//gives n
  System.out.println(name.concat(" Arun"));

java will automatically create object for String name="Hello" syntax;

in heap memory we have String constant pool
String s1 = "Navin";
String s2 = "Navin";
s1 will refer to address of Navin in Scp
got two refreneces for the same object

when concat like Navin +reddy new address is allocated meaning new object 
old Navin is eligible for garbage collection

__________________________________________________________________________________________
************
String buffer and String builder used to make immutable String;
Stores and manipulates sequences: A StringBuffer is a mutable class that can store and manipulate sequences of characters. 
 
Thread-safe: A StringBuffer is thread-safe and synchronized. 
 
Faster than String: A StringBuffer is faster than the String class. 
 
Efficient: A StringBuffer is efficient because it doesn't require creating a new sequence in memory to update it. 
 

   StringBuffer s = new StringBuffer();//returns 16bytes
        System.out.println(s.capacity());

 s.append(" Reddy");
        
        System.out.println(s);
        String str = s.toString();
        System.out.println(str);//gives Navin reddy

          s.append(" Reddy");
        s.deleteCharAt(2);
        System.out.println(s);
        String str = s.toString();
        System.out.println(str);//give nain reddy

        s.insert(0, "Java ");
        System.out.println(s);

        s.setLength(30);//adds extra characters " "
        s.setLength(2); //prints  only the 2 characters of navin reddy
        s.ensureCapacity(100);//min capacity 100

StringBuffer is thread Safe but StringBuilder  is faster but  not thread safe

sb has replace ,delete,  substring and indexOf, LastIndexOf and reverse methods and also length() method

java.lang.Object
 ↳ java.lang
    ↳ Class StringBuilder
it was added in jdk1.5


__________________________________________________________________________________________

What is static?**************
Shared among all instances:
All instances of the class share the same copy of the static variable. If one instance modifies the variable, the change is visible to all other instances. 
 
Accessed using the class name:
Static variables can be accessed using the class name, without creating an object of the class. For example, MyClass.count.
Memory efficiency:
Static variables are stored in the class's memory area, not in the memory area of individual objects. This can be more efficient, especially if you have a large number of objects.

static variables should be accessed using classname
       Mobile.name = "SmartPhone";

static variable belongs to class not object like data members or instanve variables

class Mobile{
    String brand;int price;
    static String name; // will affect all object .names
    public void show(){
        //inside method are called local variables
        System.out.println(brand);
        System.out.println(price);
        System.out.println(name);
    }
}

//in jvm we have class loader loads class then object are instantiated c will load only once from library
//if we don't create the object nothing will be initialised

in order to get something from static block we can do this

// import java.io.*;
import java.lang.String;

class Mobile{
    String brand;int price;
    static String name; // will affect all object .names

    static{
        //will only once
        name = "Phone";
        System.out.println("Hello");
    }

    public Mobile(){
        brand = "";
        price = 200;
    }
    public void show(){
        //inside method are called local variables
        System.out.println(brand);
        System.out.println(price);
        System.out.println(name);
    }
}

public class Hello{
    public static void main(String a[]) throws ClassNotFoundException{
    //    Mobile  ob1 = new Mobile();
    //    ob1.brand = "Apple";
    //    ob1.price = 1500;
       
    
    //    ob2.show();
    Class.forName("Mobile");
    //meaning this will execute the static block
    //gives Hello inside the static block
        
    }

}

__________________________________________________________________________________________

static methods**************
use ClassName.methodName to directly access the class methods
but normal methods need to be called with objects ob.method()

   public static void show1(){
        System.out.println("in static method");
        System.out.println(name);
        System.out.println(price);//error
        System.out.println(brand);//error
    }error:non static method show() cannot be referenced from a static context


     Mobile.show1(ob1);//give a object ref for the method to remove this error

take a look at this
// import java.io.*;
import java.lang.String;

class Mobile{
    String brand;int price;static String name="Phone";
    public void show(){
        //inside method
        System.out.println(brand);
        System.out.println(price);
        System.out.println(name);
    }

    public static void show1(Mobile ob){
        System.out.println("in static method");
        System.out.println(name);//Phone
        System.out.println(ob.name);//Phone
        System.out.println(ob.price);//1500
        System.out.println(ob.brand);//"Apple"
    }
}

public class Hello{
    public static void main(String a[]){
       Mobile  ob1 = new Mobile();
       ob1.brand = "Apple";
       ob1.price = 1500;
    
       
    
     Mobile.show1(ob1);
        
    }

}

__________________________________________________________________________________________
Encapsulation****
private int age;
Hello.java:12: error: age has private access in Human
        obj.age = 12;

public String getName(){
        return name;
}
System.out.println(obj.getName());

//set age
obj.setAge(30);
System.out.println(obj.getAge());

only way to access the data members through methods is called Encapsulation

__________________________________________________________________________________________
*******Getters and Setters*********
    public void setAge(int age){
        this.age = age;
    }

__________________________________________________________________________________________
*********this*******
local variable a is passed go ivariable age

    public void setAge(int a){
        age = a;
    }

        public void setAge(int age){
        age = age;//this should work right? but no
        it means age local variable is assigning to itself
    }

    do this

    public void setAge(int a, Human ob){
        
        ob.age = a;
    }

      obj.setAge(30, obj);
        System.out.println(obj.getAge());

    this refers to the current object
    this.age = age;


__________________________________________________________________________________________
In Java, a private variable is a variable that can only be accessed within the class it is declared in. This means that other classes, even subclasses, cannot directly access the variable. 
***
__________________________________________________________________________________________

**constructors*****
Constructors can be used to perform any necessary setup tasks when an object is created.
This might include opening files, connecting to databases, or allocating resources.
//String is object type so we get null before assigning

 public Human(){//defualt constuctor
        // You can write connections in constuctor
        //always change the instacne variables with methods or constructor best practice
        age = 13;
        name = "Rahul";
    }

     public Human(int a, String n){//parameterized constructor
        age = a;
        name = n;
    }
__________________________________________________________________________________________
this and super method**************

// import java.io.*;
import java.lang.String;

class A{

    public A(){
        System.out.println("in A");
    }

}class B extends A{
    public B(){
        System.out.println("in B");
    }
    // public B(int n){
    //     System.out.println("in B int");
    // }
}

public class Hello{
    public static void main(String a[]){
      B b = new B();
    }

}
//both constructors are called

//for this we get in A and in B int 
class B extends A{
    public B(){
        System.out.println("in B");
    }
    public B(int n){
        System.out.println("in B int");
    }
}//for   B b = new B(5);


//This code gives op as in A in int b

class A{

    public A(){
        System.out.println("in A");
    }
      public A(int n){
        System.out.println("in A int");
    }

}class B extends A{
    public B(){
        System.out.println("in B");
    }
    public B(int n){
        System.out.println("in B int");
    }
}
*Every constuctor in java has method which is invisible super() method
like
  public A(){
    super();
        System.out.println("in A");
    }
      public A(int n){
        super();
        System.out.println("in A int");
    }

*super means call the constuctor of the super class
*//this code gives op as in A int, in B int
// import java.io.*;
import java.lang.String;

class A{

    public A(){
        System.out.println("in A");
    }
      public A(int n){
        System.out.println("in A int");
    }

}class B extends A{
    public B(){
        System.out.println("in B");
    }
    public B(int n){
        super(n);
        System.out.println("in B int");
    }
}

public class Hello{
    public static void main(String a[]){
      B b = new B(5);
    }

}


*//for this we get op as in int A in B 

class A{

    public A(){
        System.out.println("in A");
    }
      public A(int n){
        System.out.println("in A int");
    }

}class B extends A{
    public B(){
        super(5);

        System.out.println("in B");
    }
    public B(int n){
        super(n);
        System.out.println("in B int");
    }
}

*what is super class for the biggest parent class?
every class extends Object class
meaning class A extends Object 
class B extends A multilevel inheritance


//this gives op as in A in B in intB
class B extends A{
    public B(){
      

        System.out.println("in B");
    }
    public B(int n){
        this();//will constructor of same class
        System.out.println("in B int");
    }
}

__________________________________________________________________________________________

naming conventions
class Calc
vairable marks
constants = PTE 
methods - showMyMarks()
Human()- constuctor

__________________________________________________________________________________________
**anonymous object
//stak will have object reference which is in heap
new A();//anonmous object 
    new A().show();
    new A().show();

__________________________________________________________________________________________
***inheritance
if in same directory we can access classes 
through object so imports are required
//write about class files here
when main java file has been ran we can get mainJavafile.class
if we create objects for the other classes in that file then JVM will create .class files for them

extends meaning is AdvcCalc 
we use multilevel inheritance every time
A, B as parents C child is not possible in java but in cpp
meaning
class C extends B, A
due to ambiguity problem//multiple inheritance

__________________________________________________________________________________________
**method overriding
class A{
    public void show(){
        System.out.println("in A show");
    }
}
class B extends A{
     public void show(){//override this method of class
        System.out.println("in B show");
    }
}
__________________________________________________________________________________________
***packages

use this in Calc.java=>package tools;
tools
 |
 |---Calc.js
 |---Calc.class 

 // import java.io.*;
import java.lang.String;
import tools.Calc;or tools.*;
public class Hello{
    public static void main(String a[]){
       Calc c = new Calc();
       System.out.println(c.add(1,2));
    }

}

System class belongs to java.lang
by default every java fies have java.lang.*;

__________________________________________________________________________________________
**access modifiers
private, public, private
if in same directory no problem for public
in different directories mention public for class and data members

private can be used in same class

  B b = new B();
b.c = 34;

        Hello.java:6: error: c has private access in B
        b.c = 34;
         ^
1 error

default is default

protected
cannot access data members outside the package 
but you can if you have subclass of that class 

__________________________________________________________________________________________
**polymorphism
compiler time or early binding->overloading
run time or late binding->overriding 
 // Laptop obj = new Laptop();
        // Computer obj = new Laptop();//is also correct because Laptop is technically a computer



////This is called dynamic method dispatch since in runtime the jvm decides which methpd to run
//and is only possible through inheritance
class A{
    public void show(){
        System.out.println("in A show");
    }
}
class B extends A{
    public void show(){
        System.out.println("in B show");
    }
}
class C extends B{
    public void show(){
        System.out.println("in B show");
    }
}

public class Hello{
    public static void main(String a[]){
        A obj = new A();//it should call B show right?
        obj.show();
        obj = new B();//new reference to B object
        //*********so A obj = new B() is overridden to B object address instead of A******
        obj.show();
        obj = new C();
        obj.show();

       
    }

}


__________________________________________________________________________________________
**final keyword
used with variables, method and classesa

variable--
  final int num = 8;//this becomes a constant
        num = 9;
        System.out.println(num);
Hello.java:22: error: cannot assign a value to final variable num
        num = 9;
        ^
1 error

class--

Hello.java:11: error: cannot inherit from final Calc
class AdvCalc extends Calc
                      ^
1 error


final class Calc{
    public void show(){
        System.out.println("in Calc show");
    }
    public void add(int a, int b){
        System.out.println(a+b);
    }
}
class AdvCalc extends Calc{
    public void r(){
        System.out.println("bla bla");
    }
}

method--
if we don't want anybody to overrider make the method final
like publi final void show

__________________________________________________________________________________________
**object Class

System.out.println(obj.toString());
System.out.println(obj);//both are same


class Laptop{
     String model;
     int price;
     public String toString(){
        return "Hey";
     }
}
public class Hello{
    public static void main(String a[]){
      Laptop obj = new Laptop();
      obj.model = "Lenovo Yoga";
      obj.price = 1000;
    
      System.out.println(obj);//returns hey
      System.out.println(obj.toString());//returns hey
    }

}

System.out.println(obj.equals(obj2));
 public boolean equals(Laptop that){
        if(this.model.equals(that.model) && this.price == that.price){
            return true;
        }else{ return false;}
     }
//use vscode or ide features to genearate from source action generate hashcode and equals

__________________________________________________________________________________________
***downcaasting and upcasting
  double d = 4.5;
        int i =(int) d;
        System.out.println(i);//typecasting

 A obj = (A)new B();
       obj.show1();//upcasting done automatically
    
   A obj = new B();//b obj refereid by a class
       obj.show1();
       B obj1=(B)obj;//downcast
       obj1.show2();

__________________________________________________________________________________________
**abstract

abstract class Car{
    public  abstract void drive();//abstact method must have abstact class
    public void playMusic(){//abstract class can have normal methods and abstact methods
        System.out.println("play music");
    }
}class WagonR extends Car{
    public void drive(){
        System.out.println("Driving...");
    }
}
public class Hello{
    public static void main(String a[]){
        Car ob = new WagonR();//WagonR is a concrete class
        //Car ob = new Car(); gives error bcoz abstact class cannot have objects
        ob.drive();
        ob.playMusic();
    }

}

//if declared in abstact class
public  abstract void drive();
//the child class should compulsorly define it other wise error
child class public void drive(){
    ...

}

//suppose there are many declared methods in abstact class
//you don't want to define them in wagonR class then you can make the wagonR also an abstact class
//then you cannot create object for wagonR so
create another class and extend it so that you can use this concrete class's object to run your methods

__________________________________________________________________________________________
**inner class

class A{
    int age;
    public void show(){
        System.out.println("in A show");
    }class B{
        public void config(){
            System.out.println("in config");
        }
    }
}
public class Hello{
    public static void main(String a[]){
      A obj = new A();
      obj.show();
      B obj1 = new B();
      obj1.config();

    }

}

obj1.config();
          ^
  symbol:   method config()
  location: variable obj1 of type B

//to resolve this use like this
class A{
    int age;
    public void show(){
        System.out.println("in A show");
    }class B{
        public void config(){
            System.out.println("in config");
        }
    }
}
public class Hello{
    public static void main(String a[]){
      A obj = new A();
      obj.show();
      A.B obj1 = obj.new B();//you will get A$B class file//since B is a non staic class
      obj1.config();



    }

}


//if class made static then you can use this
      A.B obj1 = new A.B();
class A{
    int age;
    public void show(){
        System.out.println("in A show");
    }
    static class B{
        public void config(){
            System.out.println("in config");
        }
    }
}//static can be only used for the inner class

__________________________________________________________________________________________
**anonymous inner class
//overrides in A show method
public class Hello{
    public static void main(String a[]){
      A obj = new A(){//anonymous inner class because this resides inside Hello class
        public void show(){
        System.out.println("in B show");
    }
      };
      obj.show();

    }

}

__________________________________________________________________________________________
abstract and anonymous inner class**************
abstract class A{
    
    abstract public void show();

}
public class Hello{
    public static void main(String a[]){
     A ab = new A(){//we are creating object of anyonymous inner class
      public void show(){
        System.out.println("in Hello A show");
      }
     };
     ab.show();

    }

}

__________________________________________________________________________________________
**interfaces

interface A{
  int age=22;String area="ss";  //all variables inside interface are final and static
 void show();//by default every thing is public abstract
  void config();

}
class B implements A{
  //must and should define the interface methods
  //if not this class becomes abstract class
  public void show(){
    System.out.println("in show");
  }
  public void config(){
    System.out.println("in config");
  }
}
public class Hello{
    public static void main(String a[]){
      A obj = new B();
      obj.show();
      System.out.println(obj.age);
    }

}//one class can implement multiple interfaces
// interface Y extends x


What is the need of interfaces
interface computer{
    public void code();
}
class Laptop implements Computer{
    public void show(){
        prinltn("code ");
    }
}
class Desktop implements Computer{
    public void show(){
        prinltn("code faster");
    }
}

class Developer {
    public void devApp(Computer ob){
        ob.code();
    }
}

main{
    Computer desk = new Desktop();
    Developer navin  = new Developer();
    naving.devApp(desk);
}

__________________________________________________________________________________________
**enum//named constants


//Status is a class
enum Status{
    Running, Failed, Pending, Success;//named constants

}

public class Hello{
    public static void main(String a[]){
        Status s = Status.Running;
        System.out.println(s.ordinal());//0 
        Status [] ss= Status.values();
        for(Status si:ss){
        System.out.println(si+" "+si.ordinal());

        }

        switch(s){
            case Running: System.out.println("All good");
            break;
        }

        // Status s = Status.Pending;
        if(s==Status.Running){
            System.out.println("all good");
        }else if (s==Status.Failed){
            System.out.println("Try again");
        }else if(s==Status.Pending){
            System.out.println("Please Wait");
        }

    }

}//you cannot extend with any other class

System.out.println(s.getClass().getSuperclass());
class java.lang.Enum//enum extends Enum



//Status is a class
enum Laptop{
    Macbook(2000), XPS(2200), Surface(1500), ThinkPad(1800), Lenovo;
    private int price;
    private Laptop(){
        price = 500;//default 
    }
    private  Laptop(int price){
        this.price = price;
        System.out.println("in Laptop "+this.name());
    }//because objects are created in the same class we need private constructors


    public int getPrice() {
        return price;
    }


    public void setPrice(int price) {
        this.price = price;
    }
}

public class Hello{
    public static void main(String a[]){
      Laptop lap = Laptop.Macbook;
      System.out.println(lap+" "+lap.getPrice());

      for(Laptop lapp:Laptop.values()){
        System.out.println(lapp+" "+lapp.getPrice());
      }

    }
 

}



__________________________________________________________________________________________
**annotations


class A{
    public void shoTheDAtaWhichBelongsToThisClass(){
        System.out.println("in A show");
    }
}class B extends A{
    @Override 
    //@depricrated do not use this class
    public void shoTheDAtaWhichBelongsToThisClass(){
        System.out.println("in B show");
    }
}
public class Hello{
    public static void main(String a[]){
        B obj = new B();
        obj.shoTheDAtaWhichBelongsToThisClass();
    }
 

}

__________________________________________________________________________________________
**lambda expression
@FunctionalInterface//single abstract methods contains
interface A{
    void show();
}

//behind the scene we have A obj = new A();
but this is the code
@FunctionalInterface
interface A{
    void show();
}
//syntactical sugar
public class Hello{
    public static void main(String a[]){
       A obj = ()->{
        {
            System.out.println("in Hello in show");//you can also remove the braces
        }
       };
       obj.show();
    }
 

}


@FunctionalInterface
interface A{
    void show(int i);
   // void show();//is not accepted because multiple non overriding abstract methods found in interface A error occurs
}

public class Hello{
    public static void main(String a[]){
       A obj = (i)->{
        {
            System.out.println("in Hello in show "+i);
        }
       };
       //or A obj =i -> prinltn(i)
       obj.show(5);
    }
 

}



A obj = ( i, j)->i+j;//short hand for

   A obj = new A(){
        
            public int add(int i, int j){
                return i+j;
            }
        
       };
       int result = obj.add(5, 4);
       System.out.println(result);
    
__________________________________________________________________________________________
**Types of interfaces
normal--->two or more methods
Functional or single abstact method-->single method
marker--> no methods//used for serialization for objects

__________________________________________________________________________________________
**Exceptions
Types of Errors
1.Compile time//eg:Println
2.runtime//to open a file but the file is not there
3.logical//2+2 but returns 5 because you need to do testing

  int i = 9;
       
        try{
             int j = 9/0;
            System.out.println(j);
        }catch(ArithmeticException e){
            System.out.println("Cannot divide by zero");
        }catch(ArrayIndexOutof){}
        catch(Exception e){
            
        }

__________________________________________________________________________________________
Hierarchy**

Object
Throwable----------
                   |
                   |
            ----------------              |----(CheckedException)SqlException--IoEXcption,ClassNotFoundException
            |              |              |
            |              |--Exception-----|-----(UncheckedException)Runtime----Arithmetic, ArrayIndex, NullPointer
            |
        ----------------------
        |       |       |     |
        |       |       |     |
    ThreadDeath VirtualMachineE,
                OutofMemorIOError

__________________________________________________________________________________________
**throw and throws

 int i =20;
      int j =0;
      try{
        j = 18/i;//throw exception
        if(j==0) throw new ArithmeticException("I don't want to print zero");

      }catch(ArithmeticException e){
        System.out.println("blab bla bla"+e);
      }


class NavinException extends Exception//or RunTimeException{
    public  NavinException(String string){
        super(string);
    }
}

public class Hello{
    public static void main(String a[]){
      int i =20;
      int j =0;
      try{
        j = 18/i;//throw exception
        if(j==0) throw new NavinException("I don't want to print zero");

      }catch(NavinException e){
        j= 18/1;
        System.out.println("blab bla bla"+e);
      }
    }

}

**throws

c(){//handle exception
    try{
         d();
         e();
    }
    catch()
   
}
d() throws Exception{//ducking the exception

}
e() throws Exception{

}

public show() throws ClassNotFoundException{
    Class.forName("Calc");
}//do not use throws for main
e.printStackTrace means show the hierarchy of calling methods

__________________________________________________________________________________________
**Input from The user
out is created as static variable  in System class
and println is a method of PrintStream
out is the object for PrintStream


import java.io.IOException;
public class Hello{
    public static void main(String a[])throws IOException{
        System.out.println("Enter a nubmer");
        int num = System.in.read();//gives ascii number
        System.out.println(num);
        System.out.println(num-40);
    }
}

//for large numbers
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
public class Hello{
    public static void main(String a[])throws IOException{
       InputStreamReader in = new InputStreamReader(System.in);
       BufferedReader bf = new BufferedReader(in);//needs object of inputStreamREader
       int num =Integer.parseInt(bf.readLine());
       System.out.println(num);
       bf.close();

    }
}

import java.util.Scanner;
public class Hello{
    public static void main(String a[]){
    System.out.println("Enter a number");
     Scanner sc = new Scanner(System.in);
     int num=sc.nextInt();
     System.out.println(num);
        
    }
}

__________________________________________________________________________________________
**try with resources

public class Hello{//normal
    public static void main(String a[]){
        int  i= 0;
        int j = 0;
        BufferedReader br = null;
    try{
        j = 18/i;
        bf = new BufferedReader(new InputStreamReader(System.in));//needs object of inputStreamREader
       int num =Integer.parseInt(bf.readLine());
       System.out.println(num);
    }catch(Exception e){
        System.out.println("an error ockred");
    }
    finally{
        System.out.println("bye");
        bf.close();
        //close resources
    }
        
    }
}

instead...

//try with resouces
import java.util.Scanner;
public class Hello{
    public static void main(String a[]){
     
    try(BufferedReader bf = new BufferedReader(new InputStreamReader(System.in)); ){
   
       int num =Integer.parseInt(bf.readLine());
       System.out.println(num);
       //BufferReader has autoclosable
    }
        
    }
}


__________________________________________________________________________________________
**Custom exception

import java.io.*;
import java.util.*;
//user defined exceptiption


class P extends Exception{

     private static int bal[] = {1001, 1002, 1300, 999, 1500};//will not print 999 and 1500
   P(){

   }
    P(String str){
      super(str);
    }
    

  
      //line 431
   
    public static void main(String []args) {
      
      for(int i =0;i<5;i++){
        try{
        P pp = new P("Amoutn balance is less");
        if(bal[i]<1000) throw pp;

        System.out.println(bal[i]);

        }catch(P pp){
          pp.printStackTrace();
        }
      }
     }
    
}
__________________________________________________________________________________________
**Threads

import java.util.Scanner;
class A extends Thread{
    public void run(){
        for(int i=1;i<=100;i++){
            System.out.println("hi");
            try{
            Thread.sleep(10);//milliseconds

            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }
}
class B extends Thread{
    public void run(){
        for(int i=1;i<=100;i++){
            System.out.println("hello");
              try{
            Thread.sleep(10);//milliseconds

            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }
}
public class Hello{
    public static void main(String a[]){
        A obj1 = new A();
        B obj2 = new B();
        System.out.println(obj1.getPriority());//gives 5 for default threads 1 is lowest and 10 is highest
        obj2.setPriority(Thread.MAX_PRIORITY);
        obj1.start();
        obj2.start();
    }
}

-----

class A implements Runnable{
    public void run(){
        for(int i=1;i<=5;i++){
            System.out.println("hi");
            try{
            Thread.sleep(10);//milliseconds

            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }
}
class B implements Runnable{
    public void run(){
        for(int i=1;i<=5;i++){
            System.out.println("hello");
              try{
            Thread.sleep(10);//milliseconds

            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }
}
public class Hello{
    public static void main(String a[]){
        Runnable obj1 = new A();
        Runnable obj2 = new B();
        Thread t1 = new Thread(obj1);
        Thread t2 = new Thread(obj2);

        t1.start();
        t2.start();
    }
}

----
  Runnable obj1 = new Runnable(){
            public void run(){
                  for(int i=1;i<=5;i++){
            System.out.println("hello");
              try{
            Thread.sleep(10);//milliseconds

            }catch(Exception e){
                e.printStackTrace();
            }
        }
            }
        };

------
//by using lambda expression

public class Hello{
    public static void main(String a[]){
        Runnable obj1 = ()->{
            
                  for(int i=1;i<=5;i++){
                    System.out.println("hai");
                    try{
                    Thread.sleep(10);//milliseconds

                    }catch(Exception e){
                        e.printStackTrace();
                    }
                  }
            
        };
        Runnable obj2 = ()->{
          
                  for(int i=1;i<=5;i++){
            System.out.println("hello");
              try{
            Thread.sleep(10);//milliseconds

            }catch(Exception e){
                e.printStackTrace();
            }
        }
            
        };
        Thread t1 = new Thread(obj1);
        Thread t2 = new Thread(obj2);

        t1.start();
        t2.start();
    }
}

__________________________________________________________________________________________
**race condition

import java.lang.InterruptedException;

class Counter{
    int count;
    public synchronized void increment(){
        count++;
    }
}


public class Hello{
    public static void main(String a[])throws InterruptedException{
        Counter c = new Counter();
        Runnable obj1 = ()->{
            
                  for(int i=1;i<=1000;i++){
                    c.increment();
                  }
            
        };
        Runnable obj2 = ()->{
          
                  for(int i=1;i<=1000;i++){
                    c.increment();
                 }
        };
         Thread t1 = new Thread(obj1);
        Thread t2 = new Thread(obj2);

        t1.start();
        t2.start();
        t1.join();
        t2.join();
        System.out.println(c.count);
    };
       
}

__________________________________________________________________________________________
**Thread States 
new, waiting, runnable, running, dead
new->start()-runnable->run()-running->sleep(),wait()-waiting
waiting->notify()-runnable, running->stop()-dead
__________________________________________________________________________________________
**Collection API
collection api-concept
collection - interface//also called collection framework
collections - class
__________________________________________________________________________________________
**ArrayList
// import java.lang.InterruptedException;

import java.util.Collection;//interface
import java.util.ArrayList;
import java.util.List;

public class Hello{
    public static void main(String a[]){
        // Collection nums = new ArrayList();//we will get object type arrays
        List<Integer> nums = new ArrayList<Integer>();

        nums.add(6);
        nums.add(4);
        nums.add(3);
        nums.add(2);
        System.out.println("The index at 2 is "+nums.get(2)); ;
        System.out.println(nums);
        System.out.println(nums.indexOf(6));
        for(int n:nums){
            System.out.println(n);
        }

        // for(Object n:nums){
        //     int num = (Integer)n;
        //     System.out.println(num*2);
        // }
    };
       
}
__________________________________________________________________________________________
**set //no sequence

import java.util.Collection;//interface
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.TreeSet;

public class Hello{
    public static void main(String a[]){
        // Collection nums = new ArrayList();//we will get object type arrays
        // Set<Integer> nums = new HashSet<Integer>();
        Set<Integer> nums = new TreeSet<Integer>();//for sorted nums

        nums.add(6);
        nums.add(4);
        nums.add(3);
        nums.add(2);
        nums.add(2);

        for(int n:nums){
            System.out.println(n);
        }

    
    };
       
}

Collection extends Iterable so...

   Iterator<Integer> values = nums.iterator();

        while(values.hasNext()){
            System.out.println(values.next());
        }

__________________________________________________________________________________________
**Map

// import java.lang.InterruptedException;
//map iteself is an interface

import java.util.Map;
import java.util.HashMap;

public class Hello{
    public static void main(String a[]){
  
        Map<String, Integer> students = new HashMap<>();
        Map<String, Integer> students = new HashTable<>();//almost table but synchronized
        students.put("Navin", 57);
        students.put("Nareshn", 59);
        students.put("Hairesh", 70);
        students.put("Hairesh", 92);//takes only one key

        System.out.println(students);//no order

        for(String key:students.keySet()){
            System.out.println(key+" : "+students.get(key));
        }
    
    };
       
}

__________________________________________________________________________________________
**sorting of Collections
  List<Integer> nums = new ArrayList<>();
        nums.add(43);
        nums.add(31);
        nums.add(72);
        nums.add(29);
        Collections.sort(nums);//it is a class
        System.out.println(nums);


import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;


public class Hello{
    public static void main(String a[]){
        Comparator<Integer> com  = new Comparator<Integer>(){
            public int compare(Integer i, Integer j){
                if(i%10>j%10) return 1;//sort 
                return -1;//unsort
            }
        };//it is compulsory to mention type in right side also for anonymous class
        List<Integer> nums = new ArrayList<>();
        nums.add(43);
        nums.add(31);
        nums.add(72);
        nums.add(29);
        Collections.sort(nums, com);//it is a class
        System.out.println(nums);
    };
       
}

////////////now try to sort the string based on the length of the string


When you pass an object to System.out.println(), Java automatically calls the toString() method of that object to convert it to a string representation before printing it. In your case, each Student object is passed to System.out.println(s);, which triggers the toString() method you defined in the Student class.

System.out.println() internally calls s.toString() to get the string representation of the Student object.

import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;


class Student{
    int age;
    String name;
    public Student(int age, String name){
        this.age = age;
        this.name = name;
    }
    public String toString(){
        return "Student age="+age+", name= "+name;
    }
}

public class Hello{
    public static void main(String a[]){
        Comparator<Student> com  = new Comparator<Student>(){
            public int compare(Student i, Student j){
                if(i.age>j.age) return 1;
                return -1;
            }
        };//or Comparator<Student> com = (i, j)->i.age>j.age?1;-1;
        List<Student> nums = new ArrayList<>();
        nums.add(new Student(21, "Navin"));
        nums.add(new Student(12, "John"));
        nums.add(new Student(18, "Parul"));
        nums.add(new Student(20, "Kiran"));
        Collections.sort(nums, com);//it is a class
        for (Student s: nums){
            System.out.println(s);
        }
        // System.out.println(nums);
    };
       
}


/////Integer class implements Comparablbe
//for natural sorting implement Comparable with type and define compareTo method

class Student implements Comparable<Student>{
    int age;
    String name;
    public Student(int age, String name){
        this.age = age;
        this.name = name;
    }
    public String toString(){
        return "Student age="+age+", name= "+name;
    }

    public int compareTo(Student that){
        return this.age>that.age?1:-1;
    }
}

__________________________________________________________________________________________
**java 1.8 Steams api
  List<Integer> nums = Arrays.asList(4, 5, 7, 2);
            // System.out.println(nums);
            // int sum =0;
            // for(int n :nums){
            //     if(n%2==0){
            //         n= n*2;
            //         sum+=n;
            //     }
            // }
            nums.forEach(n->System.out.println(n));

   List<Integer> nums = Arrays.asList(4, 5, 7, 2);
            nums.forEach(n->System.out.println(n));
            Consumer<Integer> con = 
                // consumer objec has onemthod accept
            (Integer n)->
                    System.out.println(n);
                ;
            
//stream is interface
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;
import java.util.Arrays;
import java.util.stream.Stream;//is an interface
import java.util.function.Consumer;
import java.util.function.Predicate;


public class Hello{
    public static void main(String a[]){
            List<Integer> nums = Arrays.asList(4, 5, 7, 2);
        //    Stream<Integer> s1 =  nums.stream();//returns stream object
        // Stream<Integer> s2=s1.filter(n->n%2==0);
        // Stream<Integer> s3=s2.map(n->n*2);
        // int result =s3.reduce(0,(c,e)->c+e);

       int result= nums.stream()
        .filter(n->n%2==0)
        .map(n->n*2)
        .sorted()
        .reduce(0, (c,e)->c+e);

           //you can only use stream one time
        //    s3.forEach(n->System.out.println(n));
        System.out.println(result);
        //    s1.forEach(n->System.out.println(n));//gives error

        Predicate<Integer> p = new Predicate<Integer>(){
            public boolean test(Integer n){
                 if(n%2==0) return true;
            return false;//or return n%2==0
            }
           
        }//filter needs object of predicate like filter(p)
        Function<Integer, Integer> f = new Function<Integer,Integer>(){
            public Integer apply(Integer n) {
                return n+2;
            }//or f=n->n*2;

        };//map(f);
        }
     
    }
__________________________________________________________________________________________
**immutable classes whose objects are immutable
String, Byte, Character, Float Double , Long..wrapper classes, 
Class, BigInteger, BigDecimcal




























































