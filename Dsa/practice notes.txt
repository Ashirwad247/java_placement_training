__________________________________________________________________________________________
prime numbers

class one{
    public static int primeChecker(int n){
        // int n = 6;
        int flag=0;
        if(n==0||n==1) return 0;   
        for (int i=2;i<n/2;i++){
            if(n%i==0){
                flag=1;
                break;
            }
        }
        if(flag==1){
            return 0;
        }
        return 1;
    }

    public static void main(String args[]){
        //for prime numbers
        int a[] = new int [20];
        int j =0;
        for(int i =1;i<=20;i++){
            if(primeChecker(i)==1){
                a[j]=i;
                j++;
           
            }
        }
        
        for (int n:a){
            if(n==0) continue;
            System.out.print(n+" ");
        }
     
    }
}

__________________________________________________________________________________________

//leap year

    //for leap year or not
        int year = 2004;
        if((year%4==0)&& (year%400==0)||(year%100)!=0){
            System.out.println("leap year");
        }else{
            System.out.println("not a leap year");
        }




__________________________________________________________________________________________
//reverse number

class one{


    public static void main(String args[]){
     //reverse of a number
     int n = 123;
     int num=0;
     while(n>0){
        int rem = n%10;
        n = n/10;
        num = num*10+rem;
     }
     System.out.println(num);
    }
}

__________________________________________________________________________________________
**
  //palindrome 
     int n = 123;
     int copy =n;
     int num=0;
     while(n>0){
        int rem = n%10;
        n = n/10;
        num = num*10+rem;
     }
     if(num==copy) System.out.println("Palindrome");
     else System.out.println("Not Palindrome");

__________________________________________________________________________________________
**armstrong

     int n = 153;
     int copy =n;
     int num=0;
     while(n>0){
        int rem = n%10;
        n = n/10;
        num += rem*rem*rem;
     }
     System.out.println(num);

__________________________________________________________________________________________
**armstrong in range
class one{
    public  static int checkArmstrong(int n){
     int copy =n;
     int num=0;
     while(n>0){
        int rem = n%10;
        n = n/10;
        num += rem*rem*rem;
     }
     if(num==copy) return 1;

        return -1;
    }

    public static void main(String args[]){
     
        for(int i =1;i<=500;i++){
            if(checkArmstrong(i)==1){
                System.out.println(i);
            }
        }
    }
}
__________________________________________________________________________________________
**
class one{
    public static void main(String args[]){
        //fibonacci upto n series
        int a = 0;
        int b = 1;
        int c;
        int n =10;
        System.out.print(a+" "+b+" ");
        for(int i =2;i<=n;i++){
            c=a+b;
            System.out.print(c+" ");
            a = b;
            b = c;//return c for the nth term 
        }
    }
}//Tc:O(n)

__________________________________________________________________________________________
**Nth term of fibonacci series//recursion
class one{
    static int fib(int n){
        if(n<=1){
            return n;
        }
        return fib(n-1)+fib(n-2);//time complexity:exponential
    }
    public static void main(String args[]){
     System.out.println(fib(9));
    }
}
__________________________________________________________________________________________
**factorial
  static int fac(int n){
        //factorial
        if(n==0){
            return 1;
        }
        return n*fac(n-1);
    }
    public static void main(String args[]){
     System.out.println(fac(5));
    }
__________________________________________________________________________________________
**
  //power of a number
    static int po(int b, int p){
        int res=1;
       for(int i=1;i<=p;i++){
        res*=b;
       }
       return res;
    }
    public static void main(String args[]){
     System.out.println(po(2, 5));
    }
//using recursion
   static int po(int b, int p){
      //or if(p==0) return 1;
      if(p==1) return b;
      return b*po(b, p-1);
    }
__________________________________________________________________________________________
**
class one{
   //factors of anumber

   public static void main(String []args){
       int n=24;
   for(int i =1;i<=n;i++){
    if(n%i==0) System.out.println(i);
   }
   }

}

__________________________________________________________________________________________
**

import java.lang.Math;
class one{
   //prime factors of a nubmer

   public static void main(String []args){
    int n = 33;
    while(n%2==0){
        System.out.println(2);
        n/=2;
    }
    for(int i =3;i<=Math.sqrt(n);i+=2){
        System.out.println(i);
        while(n%i==0){
            System.out.println(i);
            n/=i;
            
        }
    }

    if(n>2){
        System.out.println(n);//if n is prime and greter than 2
    }
    
   }

}

__________________________________________________________________________________________

class one{
   //strong number
    //if summ===n strong 

     static int fac(int n){
        //factorial
        if(n==0){
            return 1;
        }
        return n*fac(n-1);
    }
   public static void main(String []args){
    int n =145;
    int sum =0;
    while(n!=0){
        int rem = n%10;
        sum+=fac(rem);
        n/=10;
    }
    System.out.println(sum);
    
   }

}
__________________________________________________________________________________________

class one{
  //perfect square
   public static void main(String []args){
    for(int i=1;i<=10;i++){
        System.out.print(i*i+" ");
    }
    
   }

}
_____________________________________________________________________________________________

class one{
  //perfect square

  public static boolean isPerfectSquare(long x)
    {
        // Find floating point value of
        // square root of x.
        if (x >= 0) {
            long sr = (long)Math.sqrt(x);

            // if product of square root
            // is equal, then
            // return T/F
            return (sr * sr == x);
        }
        // else return false if n<0
        return false;
    }

    public static boolean isPerfectSquare(long n) {
        // Base case: 0 and 1 are perfect squares
        if (n <= 1) {
            return true;
        }

        // Initialize boundaries for binary search
        long left = 1, right = n;

        while (left <= right) {
            // Calculate middle value
            long mid = left + (right - left) / 2;

            // Calculate square of the middle value
            long square = mid * mid;

            // If the square matches n, n is a perfect square
            if (square == n) {
                return true;
            }
            // If the square is smaller than n, search the right
            // half
            else if (square < n) {
                left = mid + 1;
            }
            // If the square is larger than n, search the left
            // half
            else {
                right = mid - 1;
            }
        }

        // If the loop completes without finding a perfect
        // square, n is not a perfect square
        return false;
    }

   public static void main(String []args){
    for(int i=1;i<=10;i++){
        System.out.print(i*i+" ");
    }
    
   }

}


__________________________________________________________________________________________

class one{
  //automorphic nubmer
  //works for up to only two digit numbers n
   public static void main(String []args){
    int n = 36;
    int sq = n*n;
    int accum=0;
    int count =0;
    while(sq!=0){
        if(count==1){
        int rem =sq%10;
        sq/=10; 
        accum=(rem*10)+accum;
        System.out.println(accum);
        if(accum==n) break;
        }else{
        int rem =sq%10;
        sq/=10; 
        accum=rem;
        if(accum==n) break;

        count++;
        }
      
    
    }
    if(accum==n)System.out.println("Automorphic number");
    
   }

}

__________________________________________________________________________________________

class one{
  //harshad number or niven number
   public static void main(String []args){
    int n = 13;
    int sum =0;
    int copy = n;
    while(n>0){
      int rem=n%10;
      n/=10;
      sum+=rem;
      System.out.println(sum);
    }
    if(copy%sum==0) System.out.println("yes");

   }

}

__________________________________________________________________________________________
**

class one{
  //abundant num sum(n)-n>n
   public static void main(String []args){
   int n = 12;
   int sum=0;
   for(int i =1;i<=n;i++){
    if(n%i==0){
      sum+=i;
    }
   }
   if(sum-n>n)System.out.println("abundant");

   }

   //or
     int sum = 0;
   
      //  // Note that this loop runs till square 
      //  // root of n
      //   for (int i=1; i<=(Math.sqrt(n)); i++)
      //   {
      //       if (n%i==0)
      //       {
      //        // If divisors are equal,take only 
      //        // one of them
      //           if (n/i == i)
      //              sum = sum + i;
   
      //           else // Otherwise take both
      //           {
      //              sum = sum + i;
      //              sum = sum + (n / i);
      //           }
      //       }
      //   }
   
      //   // calculate sum of all proper divisors 
      //  // only
      //   sum = sum - n;
      //   return sum;

}
__________________________________________________________________________________________
**

class one{
  //friendly pair
  public static int summer(int n){
   int sum=0;
   for(int i =1;i<=n;i++){
    if(n%i==0){
      sum+=i;
    }
   }
   return sum;
  }
   public static void main(String []args){
      int n1=6;
      int n2=28;
      int n1Sum=summer(n1);
      int n2Sum=summer(n2);
      System.out.println(n1Sum+" "+n2Sum);
      if(n1Sum/n1==n2Sum/n2)System.out.println("Yes");

   }

   

}
__________________________________________________________________________________________
**Highest common factor

class one{
 //hcf
   public static void main(String []args){
    int n1 = 36, n2 = 60, hcf =0;
    for(int i=1;i<=n1||i<=n2;i++){
      if(n1%i==0&& n2%i==0) hcf=i;
    }
    System.out.println(hcf);
   }

   

}
__________________________________________________________________________________________
**lcm
class one{
 //lcm
   public static void main(String []args){
    int n1 = 36, n2 = 60, lcm=0;
    int max =(n1>n2)?n1:n2;
    for(int i =max;i<=n1*n2;i++){
      if(i%n1==0 && i%n2==0){
        lcm = i;
        break;
      }
    }
    System.out.println(lcm);
   }

   

}

__________________________________________________________________________________________
**largest in the array recursion

class one{
 //largest in arry
 public static int largest(int a[], int i, int max){
  if(i==a.length) return max;
  if(a[i]>max) max=a[i];
  return largest(a, i+1, max);
 }
   public static void main(String []args){
    int arr[] = {2,1, 3, 4, 5, 7};
    
    int maxi =largest(arr, 0, arr[0]);
    System.out.println(maxi);
   }


   

}
__________________________________________________________________________________________
**check letter is alphabet or not

 public static void main(String[] args)
    {										
        char ch;
                              
        ch = '9';
		
	//condition for checking characters
        if((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))
	      System.out.println("The inserted character " + ch + " is an Alphabet");
	else
	      System.out.println("The inserted character " + ch + " is not an Alphabet");
		
		
    
    	//condition for checking characters
        if((ch >= 97 && ch <= 122) || (ch >= 65 && ch <= 90))
	      System.out.println("The inserted character " + ch + " is an Alphabet");
	else
	      System.out.println("The inserted character " + ch + " is not an Alphabet");
		

    
    } //end of the main method

__________________________________________________________________________________________
//ascci of character
char c= 'a';
int i = c;
print(i);//65
__________________________________________________________________________________________
//length of characer
   public static void main(String []args){
   int length=0;
		
                String s = "prepinsta";
                for (char c1 : s.toCharArray()) 
			length++;
		System.out.println("Length of String is : "+length);
   }

__________________________________________________________________________________________
**Palindrome String
import java.io.*;
class one{

   public static void main(String []args)throws IOException{
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String str = br.readLine();
    String temp = str;
    StringBuffer sb = new StringBuffer(str);
    sb.reverse();
    str = sb.toString();
    if(temp.equalsIgnoreCase(str)) System.out.println(temp+" is Palindrome");
   }


   

}
__________________________________________________________________________________________
**sort of array
import java.util.*;
class HelloWorld {
public static void main(String[] args) {
int a[]={5,9,3,8,4};
int n=a.length;
Arrays.sort(a);
for(int i=0;i<n;i++){
System.out.println(a[i]);
}
}
}
Time Complexity: O(nlogn)
__________________________________________________________________________________________
**reverse elements in array
import java.io.*;
class one{

   public static void main(String []args)throws IOException{
    int arr[] = {1,2,3 ,4, 5};
    int i = 0;
    int j = arr.length-1;
    while(i!=j){
      int temp = arr[i];
      arr[i] = arr[j];
     arr[j]=temp;
      i++;
      j--;
    }
    for(int n:arr){
      System.out.print(n+" ");
    }
   }


   

}
__________________________________________________________________________________________
**  public boolean isAnagram(String s, String t) {
        char[] c1 = s.toCharArray();
        char[] c2 = t.toCharArray();
        Arrays.sort(c1);
        Arrays.sort(c2);
    
        String s1 = new String(c1);
        String s2 = new String(c2);
            System.out.println(s1);
            System.out.println(s2);
        
        if(s1.equals(s2))return true;
        

      return false;
__________________________________________________________________________________________
**binary to  decimal conversion

import java.io.*;
import java.util.*;
class one{

   public static void main(String []args){
    //  int num =101100001;
     int num =1111;
     int p = 0;
     int decimal = 0;
     while(num>0){
      int rem = num%10;
      num=num/10;
      decimal+=rem*(int)Math.pow(2,p);
      p++;
     }
     System.out.println(decimal);
    }
   


   

}
__________________________________________________________________________________________
**octal to decimal conversion


import java.io.*;
import java.util.*;
class one{

   public static void main(String []args){
    //  int num =512;
     int num 512;
     int p = 0;
     int decimal = 0;
     while(num>0){
      int rem = num%10;
      num=num/10;
      decimal+=rem*(int)Math.pow(8,p);
      p++;
     }
     System.out.println(decimal);
    }
   


   

}

__________________________________________________________________________________________
**
import java.io.*;
import java.util.*;
class one{
  //length of the string recursion
  public static int length(String str){
    if(str.equals("")) return 0;
    return length(str.substring(1))+1;
  }
   public static void main(String []args){
     String a = "Hello";
    //  System.out.println(a.substring(1)+1);
    System.out.println(length(a));
    String b = new String("java");
    String c = new String("java");
    if(b==c){
      System.out.println("yes");
    }
    System.out.println(b==c);
    //equals 
    //compareTo to compare string length
    //equalsIgnoreCase()
    }
   


   

}

__________________________________________________________________________________________
**second Largest in the array
import java.io.*;
import java.util.*;
class one{

   public static void main(String []args){
    int a[] = {1,23,4,5,6};
    int one = a[0];
     int secM = Integer.MIN_VALUE;
     for(int n:a){
      if(n>one){
        secM = one;
        one = n;
      }else if(n>secM && n<one){
        secM = n;
      }
     }
     System.out.println(secM);
     System.out.println(one);
    }
   


   

}
__________________________________________________________________________________________
**two sum

import java.io.*;
import java.util.*;
class one{
  //two-sum leetcode
   public static void main(String []args){
    int arr[] = {3,2, 4};//becomes 234
    int[][] a = new int[arr.length][2];
    for(int i=0;i<arr.length;i++){
      a[i][0] = arr[i];
      a[i][1] = i;
    }
    int t = 6;
    Arrays.sort(a, (c, d)->Integer.compare(c[0], d[0]));
    // System.out.println(arr);
    int l = 0, r = arr.length-1;
    // for(int n:arr){
    //   System.out.println(n);
    // }
    while(l<r){
      int sum = a[l][0]+a[r][0];
      if(sum==t){ System.out.println(a[l][1]);
        System.out.println(a[r][1]);
        break;}
      else if(sum<t) l++;
      else r--;

    }
  

    }
   


   

}
__________________________________________________________________________________________
**Hexadecimal to Decimal 
import java.io.*;
import java.util.*;
class one{
  static int convert(String hex){
   String digits = "0123456789ABCDEF";  
             hex = hex.toUpperCase();  
             int val = 0;  
             for (int i = 0; i < hex.length(); i++)  
             {  
                 char c = hex.charAt(i);  
                 int d = digits.indexOf(c);  
                 val = 16*val + d;  
             }  
             return val;  
  }
    
  public static void main(String args[]){
    String hex = "C9";
    System.out.println(convert(hex));
  }


   


   

}



__________________________________________________________________________________________
**Decimal to Binary
import java.io.*;
import java.util.*;
class one{
  
  public static void main(String args[]){
    int decimal = 12;
		//integer array for storing binary digits 
		int binary[] = new int[20];
		int i = 0; 
		//writing logic for the conversion 
		while(decimal > 0)
		{       
			int r = decimal % 2;
			binary[i++] = r;
			decimal = decimal/2;
		}
		//printing result
		System.out.print("Binary number : ");
		for(int j = i-1 ; j >= 0 ; j--)
		System.out.print(binary[j]+"");
  }


   


   

}

__________________________________________________________________________________________
**sort the first half in ascending and second half in descending 
import java.io.*;
import java.util.*;
class one{
  static void printOrder(int []a, int n){
    int temp;
    for(int i =0;i<n-1;i++){
      for(int j =0;j<n/2;j++ ){
        if(a[j]>a[j+1]){
          temp = a[j];
          a[j] = a[j+1];
          a[j+1] = temp;
        }
      }
      for(int j  =n/2;j<n-1;j++){
        if(a[j]<a[j+1]){
          temp = a[j];
          a[j] = a[j+1];
          a[j+1] = temp;
        }
      }

    }

    for(int s:a){
      System.out.println(s);
    }
  }
  
  public static void main(String args[]){
   int arr[] = {3, 2, 4, 1, 10, 30, 40, 20};
   int n = arr.length;
   printOrder(arr, n);
  }


   


   

}
__________________________________________________________________________________________
**F(N) calculation

import java.lang.*;
import java.util.Arrays;

class one//using recursion
{
  //F(N)=(1)+(2*3)+(4*5*6)+...N.
//F(4)=5167
   

    public static void main(String []args){
      int n = 3;
      System.out.println(term(1, 1, 3));

    }

    public static int term(int calculated, int current, int N){
      if(current==N+1) return 0;
      int i, cur=1;
      for( i =calculated;i<calculated+current;i++){
        cur*=i;
      }
      return cur+term(i, current+1, N);
    }
     
}
__________________________________________________________________________________________
**Print all permutatipons of a string recursions

public
class one {
    // Function to print all the permutations of str
    static void printPermutn(String str, String ans) {

        // If string is empty
        if (str.length() == 0) {
            System.out.print(ans + " ");
            return;
        }
        for (int i = 0; i < str.length(); i++) {

            // ith character of str
            char ch = str.charAt(i);

            // Rest of the string after excluding the ith character
            String r = str.substring(0, i) + str.substring(i + 1);

            // Recurvise call
            printPermutn(r, ans + ch);
        }
    }

    // Driver code
    public
    static void main(String[] args) {
        String s = "abb";
        printPermutn(s, "");
    }
}

__________________________________________________________________________________________
**Frequency of array
import java.util.Arrays;
class Main
{
public static void countFreq(int arr[], int n)
{
boolean visited[] = new boolean[n];
Arrays.fill(visited, false);

// Traverse through array elements and
// count frequencies
for (int i = 0; i < n; i++) {

// Skip this element if already processed
if (visited[i] == true)
continue;

// Count frequency
int count = 1;
for (int j = i + 1; j < n; j++) {
if (arr[i] == arr[j]) {
visited[j] = true;
count++;
}
}
System.out.println(arr[i] + " occurs " + count +" times ");
}
}

// Driver code
public static void main(String []args)
{
int arr[] = new int[]{10, 30, 10, 20, 10, 20, 30, 10};
int n = arr.length;
countFreq(arr, n);
}
}

import java.lang.*;
import java.util.Arrays;

class one
{
    public static void main (String[] args) {
        int[] arr = {5, 8, 5, 7, 8, 10};
        int size = arr.length;
        countFrequency(arr, size);
    }

    static void countFrequency(int[] arr, int n)
    {

        Arrays.sort(arr);

        for(int i =0 ;i<n;i++){
          int count = 1;
          while(i<n-1 && arr[i]==arr[i+1]){
            i++;count++;
          }
          // System.out.println(i);
          System.out.println(arr[i]+" "+count);
        }
    }
}
__________________________________________________________________________________________
**Group Anagrams
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map <String, List<String>> mp = new HashMap<>();
        for(String s:strs){
            int[] count = new int[26];
            for(char c:s.toCharArray()){
                count[c-'a']++;
            }
            StringBuilder sb = new StringBuilder();
            for(int i :count) {
                sb.append("#");
                sb.append(i);
            }
            String key = sb.toString();
            if(!mp.containsKey(key)){
                mp.put(key, new ArrayList<>());
            }
            mp.get(key).add(s);
        }
        return new ArrayList<>(mp.values());
    }
}



__________________________________________________________________________________________
**longest Subsequent array
class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> s = new HashSet<>();
         int n = nums.length;
        if (n == 0)
            return 0;
        for(int i:nums){
            s.add(i);
        }
        int longest = 1;
        for(int it:s){
            if(!s.contains(it-1)){
                int cnt  =1;
                int x = it;
                while(s.contains(x+1)){
                    x = x+1;
                    cnt++;
                }
               longest =Math.max(cnt, longest);
            }
        }
     return longest;
    }
}


__________________________________________________________________________________________
**search in a 2d sorted array
import java.util.*;

public class one {
    //search of an element in 2d matrix using dfs on a sorted matrix
    

    public static void main(String[] args) {

         int a[][] =  {{4,5,2,7}, {0,1,12,3},{8,9,10,6}};
        
        int x = 6;
        int flag=0;

        int i=0, j=3;
  
        while(i<3 && j>=0){
          if(a[i][j]==x){
            System.out.println("Element found at ("+i+","+j+")");
            flag =1;
            break;
          }
          else if(a[i][j]>x){
            j--;
          }else{
            i++;
          }
        }
        if(flag==0)
            System.out.println("Not found");
    }
}
__________________________________________________________________________________________
**Merge of two Sorted Arrays
import java.util.*;

public class one {
    //merge two sorted arrays
    

    public static void main(String[] args) {
      int a1[] = {1,3,3,2,3};

      int a2[] = {4, 5, 6};
      Arrays.sort(a1);
      Arrays.sort(a2);
      int arr[] = new int[a1.length+a2.length];
      int i =0, j=0,ind=0;
      while(i<a1.length && j<a2.length){
        if(a1[i]<a2[j]){
          arr[ind++]=a1[i++];
       
        }else if(a1[i]>a2[j]){
          arr[ind++]=a2[j++];

        }else{
          arr[ind++]=a1[i++];
          j++;
        }
      }

      while(i<a1.length){
        arr[ind++]=a1[i];
      }
      while(j<a2.length){
        arr[ind++]=a2[j++];
      }
      for(int k:arr){
        System.out.print(k+" ");
      }
    
    }
}


 // Method to merge two arrays and remove duplicates
    public static int[] mergeAndRemoveDuplicates(int[] a1, int[] a2) {
        // Use a TreeSet to automatically sort and remove duplicates
        Set<Integer> set = new TreeSet<>();
        
        // Add elements from the first array
        for (int num : a1) {
            set.add(num);
        }
        
        // Add elements from the second array
        for (int num : a2) {
            set.add(num);
        }
        
        // Convert the set to an array
        int[] result = new int[set.size()];
        int index = 0;
        for (int num : set) {
            result[index++] = num;
        }
        
        return result;
    }
}


__________________________________________________________________________________________
import java.util.*;

public class one {
    //toggle string cases
    

    public static void main(String[] args) {
     String s = "Hello";
     String asn ="";
     for(int i=0;i<s.length();i++){
      if(Character.isUpperCase(s.charAt(i))){
        asn+=Character.toLowerCase(s.charAt(i));
      }else{
                asn+=Character.toUpperCase(s.charAt(i));

      }
      System.out.println(asn);
     }
    
    }
}


__________________________________________________________________________________________
**

import java.util.*;

public class one {
    //remove vowels from the string
    

    public static void main(String[] args) {
     String s = "Hello";
    String s1 = "";
      s1=s.replaceAll("[aeiou]","");
      System.out.println(s1);
     }
    
    
}
__________________________________________________________________________________________
**
import java.util.*;

public class one {
    //remove special characters from string
    

    public static void main(String[] args) {
    String s = "hel1456lo56wor%^ld";
     s=s.replaceAll("[^a-zA-Z]","");
     System.out.println(s);
     }
    
    
}

import java.util.*;

public class one {
    //remove special characters from string
    

    public static void main(String[] args) {
    String s = "hel1456lo56wor%^ld";
   for (int i = 0; i < s.length(); i++)
        {
            // Finding the character whose
            // ASCII value fall under this
            // range
            if (s.charAt(i) < 'A' || s.charAt(i) > 'Z' && s.charAt(i) < 'a' || s.charAt(i) > 'z')
            {

                // erase function to erase
                // the character
                s = s.substring(0, i) + s.substring(i + 1);
                i--;
                System.out.println(i);
            }
        }
        // System.out.print(s);
    System.out.println(s);

    }
    
    
}

__________________________________________________________________________________________
**remove space in string
just use s.split("[//s]", "")
import java.util.*;

public class one {
    //remove space characters from string
    

    public static void main(String[] args) {
    String s = "Presp ins the last ba";
    char c[] = s.toCharArray();
    StringBuffer sb = new StringBuffer();
    for(int i=0;i<c.length;i++){
      if(c[i]!=' '&& c[i]!='\t'){
        sb.append(c[i]);
      }
    } 
    System.out.println(sb);

    }
    
    
}
__________________________________________________________________________________________
**largest sum contigiuos subarray //kadanes algorithm

public static void main(String[] args) {
        int[] arr = {-2, -3, 4, -1, -2, 1, 5, -3};
        int n = arr.length;
        int res = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            int sum = 0;
            for (int j = i; j < n; j++) {
                sum += arr[j];
                res = Math.max(sum, res);
            }
        }
        System.out.println(res);
    }

  import java.util.*;

public class one {
    //kadens algo
    

    public static void main(String[] args) {
     int[] arr = {-2, -3, 4, -1, -2, 1, 5, -3};
        int n = arr.length;
        int max_sum = Integer.MIN_VALUE, curr_sum = 0;

        for (int i = 0; i < n; i++) {
          curr_sum+=arr[i];
          if(max_sum<curr_sum) max_sum=curr_sum;
          if(max_sum<0) curr_sum=0;
        }

        System.out.println(max_sum);

    }
    
    
}

__________________________________________________________________________________________
**valid sudoku (leetcode)
class Solution {
    public boolean isValidSudoku(char[][] board) {
        Map <Integer, Set<Character>> rows = new HashMap<>();
        Map <Integer, Set<Character>> cols = new HashMap<>();
        Map <String, Set<Character>> sqs = new HashMap<>();
        for(int i = 0;i<9;i++){
            rows.put(i, new HashSet<>());
            cols.put(i, new HashSet<>());
        }
        for(int i =0;i<3;i++){
            for(int j = 0;j<3;j++){
                sqs.put(i +","+ j, new HashSet<>());
            }
        }
        for(int r =0;r<9;r++){
            for(int c=0;c<9;c++){
                if(board[r][c]=='.') continue;
                char num = board[r][c];
                String sqKey = (r/3)+","+(c/3);
                if(rows.get(r).contains(num) || cols.get(c).contains(num)||
                    sqs.get(sqKey).contains(num)
                ) return false;
                rows.get(r).add(num);
                cols.get(c).add(num);
                sqs.get(sqKey).add(num);
            }
        }

        return true;
    }
}

__________________________________________________________________________________________
**reverse Number (signded) (leetcode)
class Solution {
    public int reverse(int x) {
        boolean negFlag=false;
        if(x<0) {negFlag=true;x=-x;}
        int num=0;
        int prevNum=0;
        while(x>0){
            int r=x%10;
            num=(num*10)+r;
            if((num-r)/10!=prevNum){
                return 0;
            }
            prevNum = num;
            x=x/10;
        }
        return negFlag?-num:num;
    }
}

__________________________________________________________________________________________
**top k frequent elements(leetcode)


class Solution {
    public int[] topKFrequent(int[] nums, int k) {
     // Using HashMap to count frequency of each number
        Map<Integer, Integer> count = new HashMap<>();
        for (int n : nums) {
            count.put(n, count.getOrDefault(n, 0) + 1);
        }

        // Using an array of lists to store numbers by their frequency
        List<Integer>[] freq = new List[nums.length + 1];
        for (int i = 0; i <= nums.length; i++) {
            freq[i] = new ArrayList<>();
        }

        // Group numbers by their frequency
        for (int key : count.keySet()) {
            int frequency = count.get(key);
            freq[frequency].add(key);
        }

        // Collecting top k frequent elements
        List<Integer> res = new ArrayList<>();
        for (int i = freq.length - 1; i > 0; i--) {
            if (freq[i].size() > 0) {
                for (int num : freq[i]) {
                    res.add(num);
                    if (res.size() == k) {
                        // Converting List<Integer> to int[] before returning
                        int[] result = new int[k];
                        for (int j = 0; j < k; j++) {
                            result[j] = res.get(j);
                        }
                        return result;
                    }
                }
            }
        }

        return new int[0]; // If no elements are found, return an empty array
    }
}

//algo...
//take hash with frequencies
//create freq list for frequenices
//store the frreq in freqarray as keys 
//res list integer type
__________________________________________________________________________________________
**preFix sum
import java.util.*;

public class one {
    //prefix Sum
    public static int[] computePrefixSums(int[] arr) {
        int n = arr.length;
        int prefixSums[] = new int[n];
        prefixSums[0] = arr[0];
        for(int i =1;i<n;i++){
            prefixSums[i] = prefixSums[i-1]+arr[i];
        }
        return prefixSums;
    }

    public static int rangeSum(int[] prefixSums,int i, int j){
        if(i==0){
            return prefixSums[j];
        }else{
            return prefixSums[j]-prefixSums[i-1];
        }
    }
    

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        int[] prefixSums = computePrefixSums(arr);

        int i = 1; // Starting index
        int j = 3; // Ending index
        System.out.println("Sum between indices " + i + " and " + j + " is: " + rangeSum(prefixSums, i, j));
    }
    
    
}

__________________________________________________________________________________________
**remove brackets from list
import java.util.Scanner;

public class Main {

public static void main(String[] args) {
     
     String s = "(a+b)=c";
     String result = s.replaceAll("[(){}]","");
     System.out.println("Expression without brackets : "+result);
  }}
__________________________________________________________________________________________
**use StringBuffer.reverse for reversing the string
__________________________________________________________________________________________
**sum of numbers in string
public class Main {
public static void main(String[] args) {
String str="4PREP2INSTAA6";
int sum=0;
for(int i=0;i<str.length();i++){ 
if(str.charAt(i)>='0' && str.charAt(i)<='9'){
sum+=(str.charAt(i)-'0');
}
}
System.out.println("Sum of all digits " +sum );
}
}
__________________________________________________________________________________________
**count freq of characters in string

import java.util.*;

public class one {
    //prefix Sum
 

   

    public static void main(String[] args) {
  
     String str ="prepinsta";
     int[] freq = new int[str.length()]; 
     int i, j; 

     //Converts given string into character array 
     char string[] = str.toCharArray(); 
     for(i = 0; i <str.length(); i++) { 
        freq[i] = 1; 
          for(j = i+1; j <str.length(); j++) { 
            if(string[i] == string[j]) { 
            freq[i]++; 

           //Set string[j] to 0 to avoid printing visited character 
            string[j] = '0'; 
          } 
       } 
    } 
    System.out.println(string[0]);
    //Displays the each character and their corresponding frequency 
    System.out.println("Characters and their corresponding frequencies"); 
    for(i = 0; i <freq.length; i++) { 
       if(string[i] != ' ' && string[i] != '0') 
          System.out.println(string[i] + "-" + freq[i]); 
       } 
   }
    
    
    
}
__________________________________________________________________________________________
Palindrome String(leetcode)
class Solution {
    public boolean isPalindrome(String s) {
       StringBuilder filteredString = new StringBuilder();
       for(char c:s.toCharArray()){
        if(Character.isLetterOrDigit(c)){
            filteredString.append(Character.toLowerCase(c));
        }
     
       }
           String cleaned = filteredString.toString();
        String reversed = new StringBuilder(cleaned).reverse().toString();
        return cleaned.equals(reversed);

    }
}

two pointer method

class Solution {
    public boolean isPalindrome(String s) {
        // Initialize two pointers
        int left = 0;
        int right = s.length() - 1;

        while (left <= right) {
            // Move left pointer to the next alphanumeric character
            while (left < right && !Character.isLetterOrDigit(s.charAt(left))) {
                left++;
            }

            // Move right pointer to the previous alphanumeric character
            while (left < right && !Character.isLetterOrDigit(s.charAt(right))) {
                right--;
            }

            // Compare characters
            if (Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right))) {
                return false;
            }

            // Move pointers inward
            left++;
            right--;
        }

        return true;
    }
}



__________________________________________________________________________________________
two sum 2 (leetcode)
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int sum=0;
        int l =0, r=numbers.length-1;
        while(l<r){
            sum=numbers[l]+numbers[r];
            if(sum==target) return new int[]{l+1,r+1};
            else if(sum<target) l++;
            else r--;
        }
        return new int[0];
    }
}
__________________________________________________________________________________________
**First non repeating character in string
class Main
{
    public static void main(String args[])
    {
        String inputStr ="prepinsta";
        boolean flag = true;

        for(char i :inputStr.toCharArray())
        {
            // if current character is the last occurrence in the string
            if (inputStr.indexOf(i) == inputStr.lastIndexOf(i))
            {
                System.out.println("First non-repeating character is: "+ i);
                flag = false;
                break;
            }
        }

        if(flag)
            System.out.println("There is no non repeating character in input string");
    }
}__________________________________________________________________________________________
**Replace Subtring in String
public class Main {
    public static void main(String[] args) {
        String originalString = "Hello, World!";
        String substringToReplace = "World";
        String replacement = "Java";

        // Replace the substring
        String modifiedString = replaceSubstring(originalString, substringToReplace, replacement);

        // Print the modified string
        System.out.println("Original String: " + originalString);
        System.out.println("Modified String: " + modifiedString);
    }

    public static String replaceSubstring(String original, String toReplace, String replacement) {
        // Check if the original string contains the substring to replace
        if (!original.contains(toReplace)) {
            return original; // If not, return the original string as it is
        }

        // Use the replaceAll method to replace all occurrences of the substring
        String modified = original.replaceAll(toReplace, replacement);
return modified;
}
}

__________________________________________________________________________________________
**String word replace ment
public
class Main {
    static void remove(String str, String word) {
        String msg[] = str.split(" ");
        String new_str = "";

        // Iterating the string using for each loop
        for (String words : msg) {

            // If desired word is found
            if (!words.equals(word)) {
                // Concat the word not equal to the given word
                new_str += words + " ";
            }
        }
        // Print the new String
        System.out.print(new_str);
    }
    public
    static void main(String[] args) {
        // Custom string as input
        String str = "This is the prepinsta";
        // Word to be removed from above string
        String word = "the";
        // Calling the method 1 by passing both strings to it
        remove(str, word);
    }
}

public class Main
{
 public static void main(String[] args)
    {

        // Given String as input from which
        // word has to be removed
        String str = "This is the prepinsta";

        // Desired word to be removed
        String word = "the";
        // Replace all words by "" string
        // using replaceAll() method
        str = str.replaceAll("the", "");

        // Trim the string using trim() method
        str = str.trim();

        // Printing the final string
        System.out.print(str);
    }
}
__________________________________________________________________________________________
**three sum (leetcode)
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List <List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        int n = nums.length;
        for(int i=0;i<n;i++){
            if(i!=0 && nums[i]==nums[i-1]) continue;
            int j = i+1;
            int k = n-1;
            while(j<k){
                int sum = nums[i]+nums[j]+nums[k];
                if(sum<0) j++;
                else if(sum>0) k--;
                else{
                    List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[k]);
                    ans.add(temp);
                    j++;
                    k--;
                    while(j<k && nums[j]==nums[j-1]) j++;
                    while(j<k && nums[k]==nums[k+1]) k--;

                }
            }
        }
        return ans;
    }
}
__________________________________________________________________________________________
**container with most water

class Solution {
    public int maxArea(int[] height) {
          int res = 0;
        int l = 0, r = height.length - 1;

        while (l < r) {
            // Calculate the area
            int area = (r - l) * Math.min(height[l], height[r]);
            // Update the result with the maximum area
            res = Math.max(res, area);

            // Move the pointer with the smaller height
            if (height[l] < height[r]) {
                l++;
            } else {
                r--;
            }
        }

        return res;
    }
}
__________________________________________________________________________________________